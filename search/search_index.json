{
    "docs": [
        {
            "location": "/", 
            "text": "Saturn\n\n\nSaturn is a web development framework written in F# which implements the server-side MVC pattern. Many of its components and concepts will seem familiar to those of us with experience in other web frameworks like Ruby on Rails or Python\u2019s Django.\n\n\nIt's heavily inspired by Elixir's \nPhoenix\n.\n\n\n\n\nWARNING: Saturn and its tooling are still in really early stage of development - which means that things may not work too well. Also, all suggestions about design choices are highly appreciated.\n\n\n\n\nRead more about why I've decided to create Saturn, and some of its design choices on my blog - \nhttp://kcieslak.io/Reinventing-MVC-for-web-programming-with-F\n\n\nSaturn rings\n\n\nSaturn itself is top layer of a multi layer system designed to create flexible, productive environment for creating web applications.\n\n\nKestrel and ASP.NET Core\n\n\n\n\nASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-based, Internet-connected application\n\n\nKestrel is a cross-platform web server for ASP.NET Core based on libuv, a cross-platform asynchronous I/O library\n\n\n\n\nGiraffe\n\n\n\n\nGiraffe is an F# micro web framework for building rich web applications. It has been heavily inspired and is similar to \nSuave\n, but has been specifically designed with ASP.NET Core in mind and can be plugged into the ASP.NET Core pipeline via middleware. Giraffe applications are composed of so called HttpHandler functions which can be thought of a mixture of Suave's WebParts and ASP.NET Core's middleware.\n\n\n\n\nSaturn moons\n\n\nSaturn is not only a library building on top of Giraffe, but also set of opinionated tooling for scaffolding a whole project and then generating some boilerplate code. At the moment our template is using (by default):\n\n\nDapper\n\n\n\n\na simple, focused on performance object mapper for .Net that you can add in to your project that will extend your \nIDbConnection\n interface.\n\n\n\n\nSimple.Migrations\n\n\n\n\nSimple.Migrations is a simple bare-bones migration framework for .NET Core (.NET Standard 1.2 and .NET 4.5). It doesn't provide SQL generation, or an out-of-the-box command-line tool, or other fancy features. It does however provide a set of simple, extendable, and composable tools for integrating migrations into your application.\n\n\n\n\nOverview\n\n\nBuilt on top of the battle-tested ASP.NET Core foundation, a highly flexible, extendable model of Giraffe Saturn provides high level abstractions, helpers and tools to enable high developer productivity, at the same time keeping high application performance provided by Kestrel and Giraffe.\n\n\nSaturn is made up of a number of distinct parts, each with its own purpose and role to play in building a web application.\n\n\n\n\nApplication\n\n\nthe start and end of the request lifecycle\n\n\nhandles all aspects of requests up until the point where the router takes over\n\n\nprovides a core set of plugs to apply to all requests\n\n\ndispatches requests into a router\n\n\nenables application and hosting configuration\n\n\n\n\n\n\nRouter\n\n\nparses incoming requests and dispatches them to the correct controller/action, passing parameters as needed\n\n\nprovides helpers to generate route paths or urls to resources\n\n\ndefines named pipelines through which we may pass our requests\n\n\nallow easy application of groups of plugs to a set of routes\n\n\n\n\n\n\nControllers\n\n\nprovide functions, called \nactions\n, to handle requests\n\n\nactions:\n\n\nprepare data and pass it into views\n\n\ninvoke rendering via views\n\n\nperform redirects\n\n\nreturns data as JSON or XML\n\n\nand much more\n\n\n\n\n\n\n\n\n\n\nViews\n\n\nrender templates\n\n\nact as a presentation layer\n\n\ndefine helper functions, available in templates, to decorate data for presentation\n\n\n\n\n\n\nChannels  \n[Not implemented yet]\n\n\nmanage sockets for easy realtime communication\n\n\nare analogous to controllers except that they allow bi-directional communication with persistent connections\n\n\n\n\n\n\nScaffolding scripts\n\n\ndotnet new\n template providing good starting point for new applications - \nhttps://github.com/SaturnFramework/Saturn.Template\n\n\ndotnet saturn\n CLI tool that controls migrations and let you easily scaffold new parts of application - \nhttps://github.com/SaturnFramework/Saturn.Dotnet\n\n\n\n\n\n\n\n\nHow to contribute\n\n\nImposter syndrome disclaimer\n: I want your help. No really, I do.\n\n\nThere might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.\n\n\nI assure you, that's not the case.\n\n\nThis project has some clear Contribution Guidelines and expectations that you can \nread here\n.\n\n\nThe contribution guidelines outline the process that you'll need to follow to get a patch merged. By making expectations and process explicit, I hope it will make it easier for you to contribute.\n\n\nAnd you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)\n\n\nThank you for contributing!\n\n\nContributing and copyright\n\n\nThe project is hosted on \nGitHub\n where you can \nreport issues\n, fork\nthe project and submit pull requests.\n\n\nThe library is available under \nMIT license\n, which allows modification and redistribution for both commercial and non-commercial purposes.", 
            "title": "Home"
        }, 
        {
            "location": "/#saturn", 
            "text": "Saturn is a web development framework written in F# which implements the server-side MVC pattern. Many of its components and concepts will seem familiar to those of us with experience in other web frameworks like Ruby on Rails or Python\u2019s Django.  It's heavily inspired by Elixir's  Phoenix .   WARNING: Saturn and its tooling are still in really early stage of development - which means that things may not work too well. Also, all suggestions about design choices are highly appreciated.   Read more about why I've decided to create Saturn, and some of its design choices on my blog -  http://kcieslak.io/Reinventing-MVC-for-web-programming-with-F", 
            "title": "Saturn"
        }, 
        {
            "location": "/#saturn-rings", 
            "text": "Saturn itself is top layer of a multi layer system designed to create flexible, productive environment for creating web applications.", 
            "title": "Saturn rings"
        }, 
        {
            "location": "/#kestrel-and-aspnet-core", 
            "text": "ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-based, Internet-connected application  Kestrel is a cross-platform web server for ASP.NET Core based on libuv, a cross-platform asynchronous I/O library", 
            "title": "Kestrel and ASP.NET Core"
        }, 
        {
            "location": "/#giraffe", 
            "text": "Giraffe is an F# micro web framework for building rich web applications. It has been heavily inspired and is similar to  Suave , but has been specifically designed with ASP.NET Core in mind and can be plugged into the ASP.NET Core pipeline via middleware. Giraffe applications are composed of so called HttpHandler functions which can be thought of a mixture of Suave's WebParts and ASP.NET Core's middleware.", 
            "title": "Giraffe"
        }, 
        {
            "location": "/#saturn-moons", 
            "text": "Saturn is not only a library building on top of Giraffe, but also set of opinionated tooling for scaffolding a whole project and then generating some boilerplate code. At the moment our template is using (by default):", 
            "title": "Saturn moons"
        }, 
        {
            "location": "/#dapper", 
            "text": "a simple, focused on performance object mapper for .Net that you can add in to your project that will extend your  IDbConnection  interface.", 
            "title": "Dapper"
        }, 
        {
            "location": "/#simplemigrations", 
            "text": "Simple.Migrations is a simple bare-bones migration framework for .NET Core (.NET Standard 1.2 and .NET 4.5). It doesn't provide SQL generation, or an out-of-the-box command-line tool, or other fancy features. It does however provide a set of simple, extendable, and composable tools for integrating migrations into your application.", 
            "title": "Simple.Migrations"
        }, 
        {
            "location": "/#overview", 
            "text": "Built on top of the battle-tested ASP.NET Core foundation, a highly flexible, extendable model of Giraffe Saturn provides high level abstractions, helpers and tools to enable high developer productivity, at the same time keeping high application performance provided by Kestrel and Giraffe.  Saturn is made up of a number of distinct parts, each with its own purpose and role to play in building a web application.   Application  the start and end of the request lifecycle  handles all aspects of requests up until the point where the router takes over  provides a core set of plugs to apply to all requests  dispatches requests into a router  enables application and hosting configuration    Router  parses incoming requests and dispatches them to the correct controller/action, passing parameters as needed  provides helpers to generate route paths or urls to resources  defines named pipelines through which we may pass our requests  allow easy application of groups of plugs to a set of routes    Controllers  provide functions, called  actions , to handle requests  actions:  prepare data and pass it into views  invoke rendering via views  perform redirects  returns data as JSON or XML  and much more      Views  render templates  act as a presentation layer  define helper functions, available in templates, to decorate data for presentation    Channels   [Not implemented yet]  manage sockets for easy realtime communication  are analogous to controllers except that they allow bi-directional communication with persistent connections    Scaffolding scripts  dotnet new  template providing good starting point for new applications -  https://github.com/SaturnFramework/Saturn.Template  dotnet saturn  CLI tool that controls migrations and let you easily scaffold new parts of application -  https://github.com/SaturnFramework/Saturn.Dotnet", 
            "title": "Overview"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Imposter syndrome disclaimer : I want your help. No really, I do.  There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.  I assure you, that's not the case.  This project has some clear Contribution Guidelines and expectations that you can  read here .  The contribution guidelines outline the process that you'll need to follow to get a patch merged. By making expectations and process explicit, I hope it will make it easier for you to contribute.  And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)  Thank you for contributing!", 
            "title": "How to contribute"
        }, 
        {
            "location": "/#contributing-and-copyright", 
            "text": "The project is hosted on  GitHub  where you can  report issues , fork\nthe project and submit pull requests.  The library is available under  MIT license , which allows modification and redistribution for both commercial and non-commercial purposes.", 
            "title": "Contributing and copyright"
        }, 
        {
            "location": "/guides/how-to-start/", 
            "text": "How to start in 60 seconds\n\n\n\n\nInstall \ndotnet\n template with \ndotnet new -i Saturn.Template\n\n\nCreate new folder and move into it - \nmkdir SaturnSample \n cd SaturnSample\n\n\nCreate new Saturn application - \ndotnet new saturn -lang F#\n\n\nIf you're on Linux/MacOS you need to run \nchmod u+x build.sh\n (see: \nhttps://github.com/SaturnFramework/Saturn/issues/15\n)\n\n\nRun build process to ensure everything was scaffolded correctly and restore dependencies - \nbuild.cmd / build.sh\n\n\nGo into subdirectory with server application - \ncd src/SaturnSample\n\n\nCreate new controller with \ndotnet saturn gen Book Books id:string title:string author:string\n\n\nRun migrations that will create database and Books table (as for now, generator is using only SQLite DB) - \ndotnet saturn migration\n\n\nOpen folder in favourite editor (VSCode) and insert suggested line (\nforward \"/books\" Books.Controller.resource\n) into \nbrowserRouter\n in \nRouter.fs\n file\n\n\nStart application by running \nbuild.cmd Run\n from the root of solution. This will start application in watch mode (automatic recompilation on changes) and open browser on \nhttp://localhost:8085\n which should display index page.\n\n\nGo to \nhttp://localhost:8085/books\n to see generated view. All buttons should be working, you can add new entries, remove or edit old ones.", 
            "title": "How to start in 60 seconds"
        }, 
        {
            "location": "/guides/how-to-start/#how-to-start-in-60-seconds", 
            "text": "Install  dotnet  template with  dotnet new -i Saturn.Template  Create new folder and move into it -  mkdir SaturnSample   cd SaturnSample  Create new Saturn application -  dotnet new saturn -lang F#  If you're on Linux/MacOS you need to run  chmod u+x build.sh  (see:  https://github.com/SaturnFramework/Saturn/issues/15 )  Run build process to ensure everything was scaffolded correctly and restore dependencies -  build.cmd / build.sh  Go into subdirectory with server application -  cd src/SaturnSample  Create new controller with  dotnet saturn gen Book Books id:string title:string author:string  Run migrations that will create database and Books table (as for now, generator is using only SQLite DB) -  dotnet saturn migration  Open folder in favourite editor (VSCode) and insert suggested line ( forward \"/books\" Books.Controller.resource ) into  browserRouter  in  Router.fs  file  Start application by running  build.cmd Run  from the root of solution. This will start application in watch mode (automatic recompilation on changes) and open browser on  http://localhost:8085  which should display index page.  Go to  http://localhost:8085/books  to see generated view. All buttons should be working, you can add new entries, remove or edit old ones.", 
            "title": "How to start in 60 seconds"
        }, 
        {
            "location": "/api/scope/", 
            "text": "Scope\n\n\nScope builder\n\n\nComputation expression used to creating routing and combining \nHttpHandlers\n, \npipelines\n and \ncontrollers\n together.\n\n\nResult of the computation expression is standard Giraffe's \nHttpHandler\nwhich means that it's easily composable with other parts of the ecosytem.\n\n\nget\n\n\nAdds handler for \nGET\n request.\n\n\nInput:\n: \nstring * HttpHandler\n\n\ngetf\n\n\nAdds handler for \nGET\n request using formater.\n\n\nInput:\n: \nPrintfFormat\n_,_,_,_'f\n * ('f -\n HttpHandler)\n\n\npost\n\n\nAdds handler for \nPOST\n request.\n\n\nInput:\n: \nstring * HttpHandler\n\n\npostf\n\n\nAdds handler for \nPOST\n request using formater.\n\n\nInput:\n: \nPrintfFormat\n_,_,_,_'f\n * ('f -\n HttpHandler)\n\n\nput\n\n\nAdds handler for \nPUT\n request.\n\n\nInput:\n: \nstring * HttpHandler\n\n\nputf\n\n\nAdds handler for \nPUT\n request using formater.\n\n\nInput:\n: \nPrintfFormat\n_,_,_,_'f\n * ('f -\n HttpHandler)\n\n\ndelete\n\n\nAdds handler for \nDELETE\n request.\n\n\nInput:\n: \nstring * HttpHandler\n\n\ndeletef\n\n\nAdds handler for \nDELETE\n request using formater.\n\n\nInput:\n: \nPrintfFormat\n_,_,_,_'f\n * ('f -\n HttpHandler)\n\n\npatch\n\n\nAdds handler for \nPATCH\n request.\n\n\nInput:\n: \nstring * HttpHandler\n\n\npatchf\n\n\nAdds handler for \nPATCH\n request using formater.\n\n\nInput:\n: \nPrintfFormat\n_,_,_,_'f\n * ('f -\n HttpHandler)\n\n\nforward\n\n\nForwards calls to different \nscope\n. Modifies the \nHttpRequest.Path\n to allow subrouting.\n\n\nInput:\n: \nstring * HttpHandler\n\n\npipe_through\n\n\nAdds pipeline to the list of pipelines that will be used for every request\n\n\nInput:\n: \nHttpHandler\n\n\nnot_found_handler\n\n\nAdds not-found handler for current scope\n\n\nInput:\n: \nHttpHandler", 
            "title": "Scope"
        }, 
        {
            "location": "/api/scope/#scope", 
            "text": "", 
            "title": "Scope"
        }, 
        {
            "location": "/api/scope/#scope-builder", 
            "text": "Computation expression used to creating routing and combining  HttpHandlers ,  pipelines  and  controllers  together.  Result of the computation expression is standard Giraffe's  HttpHandler which means that it's easily composable with other parts of the ecosytem.", 
            "title": "Scope builder"
        }, 
        {
            "location": "/api/scope/#get", 
            "text": "Adds handler for  GET  request.  Input: :  string * HttpHandler", 
            "title": "get"
        }, 
        {
            "location": "/api/scope/#getf", 
            "text": "Adds handler for  GET  request using formater.  Input: :  PrintfFormat _,_,_,_'f  * ('f -  HttpHandler)", 
            "title": "getf"
        }, 
        {
            "location": "/api/scope/#post", 
            "text": "Adds handler for  POST  request.  Input: :  string * HttpHandler", 
            "title": "post"
        }, 
        {
            "location": "/api/scope/#postf", 
            "text": "Adds handler for  POST  request using formater.  Input: :  PrintfFormat _,_,_,_'f  * ('f -  HttpHandler)", 
            "title": "postf"
        }, 
        {
            "location": "/api/scope/#put", 
            "text": "Adds handler for  PUT  request.  Input: :  string * HttpHandler", 
            "title": "put"
        }, 
        {
            "location": "/api/scope/#putf", 
            "text": "Adds handler for  PUT  request using formater.  Input: :  PrintfFormat _,_,_,_'f  * ('f -  HttpHandler)", 
            "title": "putf"
        }, 
        {
            "location": "/api/scope/#delete", 
            "text": "Adds handler for  DELETE  request.  Input: :  string * HttpHandler", 
            "title": "delete"
        }, 
        {
            "location": "/api/scope/#deletef", 
            "text": "Adds handler for  DELETE  request using formater.  Input: :  PrintfFormat _,_,_,_'f  * ('f -  HttpHandler)", 
            "title": "deletef"
        }, 
        {
            "location": "/api/scope/#patch", 
            "text": "Adds handler for  PATCH  request.  Input: :  string * HttpHandler", 
            "title": "patch"
        }, 
        {
            "location": "/api/scope/#patchf", 
            "text": "Adds handler for  PATCH  request using formater.  Input: :  PrintfFormat _,_,_,_'f  * ('f -  HttpHandler)", 
            "title": "patchf"
        }, 
        {
            "location": "/api/scope/#forward", 
            "text": "Forwards calls to different  scope . Modifies the  HttpRequest.Path  to allow subrouting.  Input: :  string * HttpHandler", 
            "title": "forward"
        }, 
        {
            "location": "/api/scope/#pipe_through", 
            "text": "Adds pipeline to the list of pipelines that will be used for every request  Input: :  HttpHandler", 
            "title": "pipe_through"
        }, 
        {
            "location": "/api/scope/#not_found_handler", 
            "text": "Adds not-found handler for current scope  Input: :  HttpHandler", 
            "title": "not_found_handler"
        }, 
        {
            "location": "/api/controller/", 
            "text": "Controller\n\n\nController builder\n\n\nComputation expression used to create Saturn controllers - abstraction representing REST-ish enpoint for serving HTML views or returning data. It supports:\n\n set of predefined actions that are automatically mapped to the enpoints following standard conventions\n\n embedding sub-controllers for modeling one-to-many relationships \n\n versioning \n\n adding plugs for particular action which in principle provides same mechanism as attributes in ASP.NET MVC applications. \n\n defining common error handler for all actions\n\n defining not-found action\n\n\nResult of the computation expression is standard Giraffe's \nHttpHandler\nwhich means that it's easily composable with other parts of the ecosytem.\n\n\nindex\n\n\nOperation that should render (or return in case of API controllers) list of data\n\n\nMapped to \nGET \"/\"\n endpoint\n\n\nInput:\n \nHttpContext -\n HttpFuncResult\n\n\nshow\n\n\nOperation that should render (or return in case of API controllers) single entry of data\n\n\nMapped to \nGET \"/:id\"\n endpoint\n\n\nInput:\n \nHttpContext * 'Key -\n HttpFuncResult\n\n\nadd\n\n\nOperation that should render form for adding new item\n\n\nMapped to \nGET \"/add\"\n endpoint\n\n\nInput:\n \nHttpContext -\n HttpFuncResult\n\n\nedit\n\n\nOperation that should render form for editing existing item\n\n\nMapped to \nGET \"/:id/edit\"\n endpoint\n\n\nInput:\n \nHttpContext * 'Key -\n HttpFuncResult\n\n\ncreate\n\n\nOperation that creates new item\n\n\nMapped to \nPOST \"/\"\n and endpoint\n\n\nInput:\n \nHttpContext -\n HttpFuncResult\n\n\nupdate\n\n\nOperation that updates existing item\n\n\nMapped to \nPOST \"/:id\"\n and \nPATCH \"/:id\"\n endpoint\n\n\nInput:\n \nHttpContext * 'Key -\n HttpFuncResult\n\n\ndelete\n\n\nOperation that deletes existing item\n\n\nMapped to \nDELETE \"/:id\"\n endpoint\n\n\nInput:\n \nHttpContext * 'Key -\n HttpFuncResult\n\n\ndelete_all\n\n\nOperation that deletes all items\n\n\nMapped to \nDELETE \"/\"\n endpoint\n\n\nInput:\n \nHttpContext -\n HttpFuncResult\n\n\n\n\nnot_found_handler\n\n\nDefine not-found handler for the controller\n\n\nInput:\n \nHttpContext -\n HttpFuncResult\n\n\nerror_handler\n\n\nDefine error for the controller\n\n\nInput:\n \nHttpContext * Exception -\n HttpFuncResult\n\n\nsubController\n\n\nAdds subcontroller\n\n\nForward to subcontroller all calls to \n/:id/:controller_name\n endpoint\n\n\nInput:\n \nstring * ('a -\n HttpHandler)\n\n\nversion\n\n\nDefine version of controller. Adds checking of \nx-controller-version\n header\n\n\nInput:\n \nint\n\n\nplug\n\n\nPlugs given \nHttpHandler\n for some actions in the controller.\n\n\nInput:\n \nAction list * HttpHandler", 
            "title": "Controller"
        }, 
        {
            "location": "/api/controller/#controller", 
            "text": "", 
            "title": "Controller"
        }, 
        {
            "location": "/api/controller/#controller-builder", 
            "text": "Computation expression used to create Saturn controllers - abstraction representing REST-ish enpoint for serving HTML views or returning data. It supports:  set of predefined actions that are automatically mapped to the enpoints following standard conventions  embedding sub-controllers for modeling one-to-many relationships   versioning   adding plugs for particular action which in principle provides same mechanism as attributes in ASP.NET MVC applications.   defining common error handler for all actions  defining not-found action  Result of the computation expression is standard Giraffe's  HttpHandler which means that it's easily composable with other parts of the ecosytem.", 
            "title": "Controller builder"
        }, 
        {
            "location": "/api/controller/#index", 
            "text": "Operation that should render (or return in case of API controllers) list of data  Mapped to  GET \"/\"  endpoint  Input:   HttpContext -  HttpFuncResult", 
            "title": "index"
        }, 
        {
            "location": "/api/controller/#show", 
            "text": "Operation that should render (or return in case of API controllers) single entry of data  Mapped to  GET \"/:id\"  endpoint  Input:   HttpContext * 'Key -  HttpFuncResult", 
            "title": "show"
        }, 
        {
            "location": "/api/controller/#add", 
            "text": "Operation that should render form for adding new item  Mapped to  GET \"/add\"  endpoint  Input:   HttpContext -  HttpFuncResult", 
            "title": "add"
        }, 
        {
            "location": "/api/controller/#edit", 
            "text": "Operation that should render form for editing existing item  Mapped to  GET \"/:id/edit\"  endpoint  Input:   HttpContext * 'Key -  HttpFuncResult", 
            "title": "edit"
        }, 
        {
            "location": "/api/controller/#create", 
            "text": "Operation that creates new item  Mapped to  POST \"/\"  and endpoint  Input:   HttpContext -  HttpFuncResult", 
            "title": "create"
        }, 
        {
            "location": "/api/controller/#update", 
            "text": "Operation that updates existing item  Mapped to  POST \"/:id\"  and  PATCH \"/:id\"  endpoint  Input:   HttpContext * 'Key -  HttpFuncResult", 
            "title": "update"
        }, 
        {
            "location": "/api/controller/#delete", 
            "text": "Operation that deletes existing item  Mapped to  DELETE \"/:id\"  endpoint  Input:   HttpContext * 'Key -  HttpFuncResult", 
            "title": "delete"
        }, 
        {
            "location": "/api/controller/#delete_all", 
            "text": "Operation that deletes all items  Mapped to  DELETE \"/\"  endpoint  Input:   HttpContext -  HttpFuncResult", 
            "title": "delete_all"
        }, 
        {
            "location": "/api/controller/#not_found_handler", 
            "text": "Define not-found handler for the controller  Input:   HttpContext -  HttpFuncResult", 
            "title": "not_found_handler"
        }, 
        {
            "location": "/api/controller/#error_handler", 
            "text": "Define error for the controller  Input:   HttpContext * Exception -  HttpFuncResult", 
            "title": "error_handler"
        }, 
        {
            "location": "/api/controller/#subcontroller", 
            "text": "Adds subcontroller  Forward to subcontroller all calls to  /:id/:controller_name  endpoint  Input:   string * ('a -  HttpHandler)", 
            "title": "subController"
        }, 
        {
            "location": "/api/controller/#version", 
            "text": "Define version of controller. Adds checking of  x-controller-version  header  Input:   int", 
            "title": "version"
        }, 
        {
            "location": "/api/controller/#plug", 
            "text": "Plugs given  HttpHandler  for some actions in the controller.  Input:   Action list * HttpHandler", 
            "title": "plug"
        }, 
        {
            "location": "/api/application/", 
            "text": "Application\n\n\nApplication builder\n\n\nComputation expression used to configure Saturn application. Under the hood it's using ASP.NET application configurations interfaces such as \nIWebHostBuilder\n, \nIServiceCollection\n, \nIApplicationBuilder\n and others. It aims to hide cumbersome ASP.NET application configuration and enable high level, declarative application configuration using feature toggles\n\n\nrouter\n\n\nDefines top-level router used for the application. It's calling \nIApplicationBuilder.UseGiraffe\n\n\nInput:\n \nHttpHandler\n\n\napplication {\n    ...\n    router myRouter\n}\n\n\n\n\npipe_through\n\n\nAdds pipeline to the list of pipelines that will be used for every request\n\n\nInput:\n \nHttpHandler\n\n\napplication {\n    ...\n    pipe_through requestId\n}\n\n\n\n\nerror_handler\n\n\nAdds global error handler for exceptions not handled anywhere else. It's using \nIApplicationBuilder.UseGiraffeErrorHandler\n\n\nInput:\n \nException -\n ILogger -\n HttpHandler\n\n\napplication {\n    ...\n    error_handler (fun e log -\n text e.Message)\n}\n\n\n\n\nurl\n\n\nDefines URL on which application will be hosted. Should include port.\n\n\nInput:\n \nstring\n\n\napplication {\n    ...\n    url \nhttp://0.0.0.0:8085/\n\n}\n\n\n\n\nmemory_cache\n\n\nEnables in-memory session cache. Required if you used \nfetchSession\n plug.\n\n\napplication {\n    ...\n    memory_cache\n}\n\n\n\n\nuse_gzip\n\n\nEnables automatic gzip compression\n\n\napplication {\n    ...\n    use_gzip\n}\n\n\n\n\nuse_static\n\n\nEnables using static file hosting. Input path defines \nWebRoot\n and \nContentRoot\n of application\n\n\nInput:\n \nstring\n\n\napplication {\n    ...\n    use_static \nstatic\n\n}\n\n\n\n\nuse_config\n\n\nDefines configuration that can be used with \nHttpContext.GetConfiguration ()\n function. Configuration function is evaluated once, during first request of the application.\n\n\nInput:\n \nunit -\n 'a\n\n\napplication {\n    ...\n    use_config (fun _ -\n \nconfig\n)\n}\n\n\n\n\nforce_ssl\n\n\nRedirect all HTTP request to HTTPS\n\n\napplication {\n    ...\n    force_ssl\n}\n\n\n\n\nuse_cors\n\n\nEnables application level CORS protection. First parameter is name of the policy. Second parameter is configuration builder setting policy options.\n\n\nInput:\n \nstring -\n (CorsPolicyBuilder -\n unit)\n\n\napplication {\n    ...\n    use_cors \nCORS_policy\n (fun builder -\n ())\n}\n\n\n\n\nuse_iis\n\n\nEnables IIS integration\n\n\napplication {\n    ...\n    use_iis\n}\n\n\n\n\n\n\nuse_jwt_authentication\n\n\nEnables default JWT authentication. First parameter is private key used to signing. Second one defines issuer of the token.\n\n\nInput:\n \nstring -\n string\n\n\napplication {\n    ...\n    use_jwt_authentication \nmySecretKey\n \nlambdafactory.io\n\n}\n\n\n\n\nuse_jwt_authentication_with_config\n\n\nEnables JWT authentication with custom configuration\n\n\nInput:\n \nJwtBearerOptions -\n unit\n\n\napplication {\n    ...\n    use_jwt_authentication_with_config (fun opts -\n ())\n}\n\n\n\n\nuse_cookies_authentication\n\n\nEnables default cookies authentication\n\n\nInput:\n \nstring\n\n\napplication {\n    ...\n    use_cookies_authentication \nlambdafactory.io\n\n}\n\n\n\n\nuse_cookies_authentication_with_config\n\n\nEnables cookies authentication with custom configuration\n\n\nInput:\n \nCookieAuthenticationOptions -\n unit\n\n\napplication {\n    ...\n    use_cookies_authentication_with_config (fun opts -\n ())\n}\n\n\n\n\nuse_github_oauth\n\n\nEnables default GitHub OAuth authentication\n\n\nInput:\n \nstring -\n string -\n string\n\n\napplication {\n    ...\n    use_github_oauth \nmyClientId\n \nmyClientSecret\n \n/login\n\n}\n\n\n\n\nuse_github_oauth_with_config\n\n\nEnables GitHub OAuth authentication with custom configuration\n\n\nInput:\n \nOAuthOptions -\n unit\n\n\napplication {\n    ...\n    use_github_oauth (fun opts -\n ())\n}\n\n\n\n\nuse_custom_oauth\n\n\nEnables custom OAuth authentication\n\n\nInput:\n \nstring -\n (OAuthOptions -\n unit)\n\n\napplication {\n    ...\n    use_custom_oauth \nLinkedIn\n (fun opts -\n ())\n}\n\n\n\n\n\n\n\n\nFunctions below enables you to add any configuration with using standard ASP.NET builders\n\n\n\n\napp_config\n\n\nAdds custom application configuration step.\n\n\nInput:\n \nIApplicationBuilder -\n IApplicationBuilder\n\n\nhost_config\n\n\nAdds custom host configuration step.\n\n\nInput:\n \nIWebHostBuilder -\n IWebHostBuilder\n\n\nservice_config\n\n\nAdds custom service configuration step.\n\n\nInput:\n \nIServiceCollection -\n IServiceCollection\n\n\nlogging\n\n\nAdds logging configuration\n\n\nInput:\n \nIloggingBuilder -\n unit", 
            "title": "Application"
        }, 
        {
            "location": "/api/application/#application", 
            "text": "", 
            "title": "Application"
        }, 
        {
            "location": "/api/application/#application-builder", 
            "text": "Computation expression used to configure Saturn application. Under the hood it's using ASP.NET application configurations interfaces such as  IWebHostBuilder ,  IServiceCollection ,  IApplicationBuilder  and others. It aims to hide cumbersome ASP.NET application configuration and enable high level, declarative application configuration using feature toggles", 
            "title": "Application builder"
        }, 
        {
            "location": "/api/application/#router", 
            "text": "Defines top-level router used for the application. It's calling  IApplicationBuilder.UseGiraffe  Input:   HttpHandler  application {\n    ...\n    router myRouter\n}", 
            "title": "router"
        }, 
        {
            "location": "/api/application/#pipe_through", 
            "text": "Adds pipeline to the list of pipelines that will be used for every request  Input:   HttpHandler  application {\n    ...\n    pipe_through requestId\n}", 
            "title": "pipe_through"
        }, 
        {
            "location": "/api/application/#error_handler", 
            "text": "Adds global error handler for exceptions not handled anywhere else. It's using  IApplicationBuilder.UseGiraffeErrorHandler  Input:   Exception -  ILogger -  HttpHandler  application {\n    ...\n    error_handler (fun e log -  text e.Message)\n}", 
            "title": "error_handler"
        }, 
        {
            "location": "/api/application/#url", 
            "text": "Defines URL on which application will be hosted. Should include port.  Input:   string  application {\n    ...\n    url  http://0.0.0.0:8085/ \n}", 
            "title": "url"
        }, 
        {
            "location": "/api/application/#memory_cache", 
            "text": "Enables in-memory session cache. Required if you used  fetchSession  plug.  application {\n    ...\n    memory_cache\n}", 
            "title": "memory_cache"
        }, 
        {
            "location": "/api/application/#use_gzip", 
            "text": "Enables automatic gzip compression  application {\n    ...\n    use_gzip\n}", 
            "title": "use_gzip"
        }, 
        {
            "location": "/api/application/#use_static", 
            "text": "Enables using static file hosting. Input path defines  WebRoot  and  ContentRoot  of application  Input:   string  application {\n    ...\n    use_static  static \n}", 
            "title": "use_static"
        }, 
        {
            "location": "/api/application/#use_config", 
            "text": "Defines configuration that can be used with  HttpContext.GetConfiguration ()  function. Configuration function is evaluated once, during first request of the application.  Input:   unit -  'a  application {\n    ...\n    use_config (fun _ -   config )\n}", 
            "title": "use_config"
        }, 
        {
            "location": "/api/application/#force_ssl", 
            "text": "Redirect all HTTP request to HTTPS  application {\n    ...\n    force_ssl\n}", 
            "title": "force_ssl"
        }, 
        {
            "location": "/api/application/#use_cors", 
            "text": "Enables application level CORS protection. First parameter is name of the policy. Second parameter is configuration builder setting policy options.  Input:   string -  (CorsPolicyBuilder -  unit)  application {\n    ...\n    use_cors  CORS_policy  (fun builder -  ())\n}", 
            "title": "use_cors"
        }, 
        {
            "location": "/api/application/#use_iis", 
            "text": "Enables IIS integration  application {\n    ...\n    use_iis\n}", 
            "title": "use_iis"
        }, 
        {
            "location": "/api/application/#use_jwt_authentication", 
            "text": "Enables default JWT authentication. First parameter is private key used to signing. Second one defines issuer of the token.  Input:   string -  string  application {\n    ...\n    use_jwt_authentication  mySecretKey   lambdafactory.io \n}", 
            "title": "use_jwt_authentication"
        }, 
        {
            "location": "/api/application/#use_jwt_authentication_with_config", 
            "text": "Enables JWT authentication with custom configuration  Input:   JwtBearerOptions -  unit  application {\n    ...\n    use_jwt_authentication_with_config (fun opts -  ())\n}", 
            "title": "use_jwt_authentication_with_config"
        }, 
        {
            "location": "/api/application/#use_cookies_authentication", 
            "text": "Enables default cookies authentication  Input:   string  application {\n    ...\n    use_cookies_authentication  lambdafactory.io \n}", 
            "title": "use_cookies_authentication"
        }, 
        {
            "location": "/api/application/#use_cookies_authentication_with_config", 
            "text": "Enables cookies authentication with custom configuration  Input:   CookieAuthenticationOptions -  unit  application {\n    ...\n    use_cookies_authentication_with_config (fun opts -  ())\n}", 
            "title": "use_cookies_authentication_with_config"
        }, 
        {
            "location": "/api/application/#use_github_oauth", 
            "text": "Enables default GitHub OAuth authentication  Input:   string -  string -  string  application {\n    ...\n    use_github_oauth  myClientId   myClientSecret   /login \n}", 
            "title": "use_github_oauth"
        }, 
        {
            "location": "/api/application/#use_github_oauth_with_config", 
            "text": "Enables GitHub OAuth authentication with custom configuration  Input:   OAuthOptions -  unit  application {\n    ...\n    use_github_oauth (fun opts -  ())\n}", 
            "title": "use_github_oauth_with_config"
        }, 
        {
            "location": "/api/application/#use_custom_oauth", 
            "text": "Enables custom OAuth authentication  Input:   string -  (OAuthOptions -  unit)  application {\n    ...\n    use_custom_oauth  LinkedIn  (fun opts -  ())\n}    Functions below enables you to add any configuration with using standard ASP.NET builders", 
            "title": "use_custom_oauth"
        }, 
        {
            "location": "/api/application/#app_config", 
            "text": "Adds custom application configuration step.  Input:   IApplicationBuilder -  IApplicationBuilder", 
            "title": "app_config"
        }, 
        {
            "location": "/api/application/#host_config", 
            "text": "Adds custom host configuration step.  Input:   IWebHostBuilder -  IWebHostBuilder", 
            "title": "host_config"
        }, 
        {
            "location": "/api/application/#service_config", 
            "text": "Adds custom service configuration step.  Input:   IServiceCollection -  IServiceCollection", 
            "title": "service_config"
        }, 
        {
            "location": "/api/application/#logging", 
            "text": "Adds logging configuration  Input:   IloggingBuilder -  unit", 
            "title": "logging"
        }
    ]
}